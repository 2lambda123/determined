//go:build ignore

package main

import (
	"fmt"
	"os"
	"sort"

	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/ec2"
)

func main() {
	regions := getEC2Regions()
	fmt.Println("regions", regions)

	var slots = map[string]int{}
	var counts = map[string]int{}
	var max = 0
	for _, region := range regions {
		// if !strings.HasPrefix(region, "us-") {
		// 	continue
		// }
		fmt.Println("fetching slots for region", region)
		region_slots := getEc2InstanceSlots(&region)
		for k, v := range region_slots {
			if current, ok := slots[k]; ok && current != v {
				panic(fmt.Sprintf("slot mismatch for %s: %d != %d", k, current, v))
			}
			slots[k] = v
			counts[k]++
			if counts[k] > max {
				max = counts[k]
			}
		}
	}
	// fmt.Println("counts", counts)
	// fmt.Println("max", max)
	// show all slots that are not available in all regions
	var view_min = 0

	keys := make([]string, 0, len(slots))
	for k := range slots {
		if counts[k] >= view_min {
			keys = append(keys, k)
		}
	}
	sort.Strings(keys)

	f, err := os.Create(os.Args[4])
	if err != nil {
		panic(err)
	}
	defer f.Close()

	fmt.Fprintln(f, "package", os.Args[1])
	fmt.Fprintln(f, "// Code generated by go run aws_gen.go. DO NOT EDIT.")
	fmt.Fprintln(f, "var", os.Args[2], "=", os.Args[3], "{")
	for _, key := range keys {
		fmt.Fprintf(f, "\t%q:\t%+v,\n", key, slots[key])
	}
	fmt.Fprintln(f, "}")
}

func getEc2InstanceSlots(region *string) map[string]int {
	result := map[string]int{}
	sess := getEC2Sess(region)
	input := &ec2.DescribeInstanceTypesInput{}

	for {
		instances, err := sess.DescribeInstanceTypes(input)
		if err != nil {
			panic(err)
		}
		for _, instance := range instances.InstanceTypes {
			gpuInfo := instance.GpuInfo
			gpuCount := 0
			if gpuInfo != nil {
				for _, g := range gpuInfo.Gpus {
					gpuCount += int(*g.Count)
				}
			}
			result[*instance.InstanceType] = gpuCount
		}
		if instances.NextToken == nil {
			break
		}
		input.NextToken = instances.NextToken
	}
	return result
}

func getEC2Sess(region *string) *ec2.EC2 {
	sess := session.Must(session.NewSessionWithOptions(session.Options{
		SharedConfigState: session.SharedConfigEnable,
	}))
	if region != nil {
		sess.Config.Region = region
	}
	return ec2.New(sess)
}

// List of regions available in AWS.
func getEC2Regions() []string {
	sess := getEC2Sess(nil)
	regions, err := sess.DescribeRegions(&ec2.DescribeRegionsInput{})
	if err != nil {
		panic(err)
	}
	regionNames := make([]string, 0, len(regions.Regions))
	for _, region := range regions.Regions {
		regionNames = append(regionNames, *region.RegionName)
	}
	sort.Strings(regionNames)
	return regionNames
}
